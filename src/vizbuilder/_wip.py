from collections.abc import Sequence
from typing import Any, Literal

import plotly.graph_objs as go
from plotly._stubs_helpers import (
    ArrayLike,
    BarMode,
    BranchVals,
    ColumnData,
    DataFrameCompatible,
    Direction,
    DisplayMode,
    EcdfMode,
    FitBounds,
    GeoScope,
    HistFunc,
    HistNorm,
    HoverData,
    LineShape,
    LocationMode,
    MapBoxStyle,
    MapCenter,
    MapIdentity,
    MapStyle,
    Marginal,
    MultiColumnData,
    Orientation,
    Points,
    Projection,
    RenderMode,
    Templates,
    TrendlineFunc,
    TrendLineScope,
    ValNorm,
)


class Base:
    df: DataFrameCompatible
    template: Templates | None = None
    title: str | None = None
    subtitle: str | None = None
    width: int | None = None
    height: int | None = None
    labels: dict[str, str] | None = None


class WithXY(Base):
    x: ColumnData | None = None
    y: ColumnData | None = None


class Colorable(Base):
    color: ColumnData | None = None

    def parallel_coordinates(
        self,
        dimensions: ColumnData | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
    ) -> go.Figure: ...
    def parallel_categories(
        self,
        dimensions: ColumnData | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        dimensions_max_cardinality: int = 50,
    ) -> go.Figure: ...


class ColorCustomizable(Colorable):
    color_discrete_sequence: list[str] | None = None
    color_discrete_map: MapIdentity | None = None

    def line_mapbox(
        self,
        lat: ColumnData | None = None,
        lon: ColumnData | None = None,
        text: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        line_group: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        zoom: int = 8,
        center: MapCenter | None = None,
        mapbox_style: MapBoxStyle = "basic",
    ) -> go.Figure: ...
    def scatter_matrix(
        self,
        dimensions: ColumnData | None = None,
        symbol: ColumnData | None = None,
        size: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        symbol_sequence: list[str] | None = None,
        symbol_map: MapIdentity | None = None,
        opacity: float | None = None,
        size_max: int = 20,
    ) -> go.Figure: ...
    def pie(
        self,
        names: ColumnData | None = None,
        values: ColumnData | None = None,
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        opacity: float | None = None,
        hole: float | None = None,
    ) -> go.Figure: ...
    def sunburst(
        self,
        names: ColumnData | None = None,
        values: ColumnData | None = None,
        parents: ColumnData | None = None,
        path: ArrayLike | None = None,
        ids: ColumnData | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        branchvalues: BranchVals | None = None,
        maxdepth: int | None = None,
    ) -> go.Figure: ...
    def treemap(
        self,
        names: ColumnData | None = None,
        values: ColumnData | None = None,
        parents: ColumnData | None = None,
        ids: ColumnData | None = None,
        path: ArrayLike | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        branchvalues: BranchVals | None = None,
        maxdepth: int | None = None,
    ) -> go.Figure: ...
    def icicle(
        self,
        names: ColumnData | None = None,
        values: ColumnData | None = None,
        parents: ColumnData | None = None,
        path: ArrayLike | None = None,
        ids: ColumnData | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        branchvalues: BranchVals | None = None,
        maxdepth: int | None = None,
    ) -> go.Figure: ...

    def funnel_area(
        self,
        names: ColumnData | None = None,
        values: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        opacity: float | None = None,
    ) -> go.Figure: ...

    def line_map(
        self,
        lat: ColumnData | None = None,
        lon: ColumnData | None = None,
        text: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        line_group: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        zoom: int = 8,
        center: MapCenter | None = None,
        map_style: MapStyle = "basic",
    ) -> go.Figure: ...
    def scatter_mapbox(
        self,
        lat: ColumnData | None = None,
        lon: ColumnData | None = None,
        text: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        size: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        opacity: float | None = None,
        size_max: int = 20,
        zoom: int = 8,
        center: MapCenter | None = None,
        mapbox_style: MapBoxStyle = "basic",
    ) -> go.Figure: ...
    def choropleth_mapbox(
        self,
        geojson: dict[str, Any] | None = None,
        featureidkey: str = "id",
        locations: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        opacity: float | None = None,
        zoom: int = 8,
        center: MapCenter | None = None,
        mapbox_style: MapBoxStyle = "basic",
    ) -> go.Figure: ...

    def timeline(
        self,
        x_start: ColumnData | None = None,
        x_end: ColumnData | None = None,
        y: MultiColumnData | None = None,
        pattern_shape: ColumnData | None = None,
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        text: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        pattern_shape_sequence: list[str] | None = None,
        pattern_shape_map: MapIdentity | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        opacity: float | None = None,
        range_x: Sequence[int | float] | None = None,
        range_y: Sequence[int | float] | None = None,
    ) -> go.Figure: ...
    def scatter_ternary(
        self,
        a: ColumnData | None = None,
        b: ColumnData | None = None,
        c: ColumnData | None = None,
        symbol: ColumnData | None = None,
        size: ColumnData | None = None,
        text: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        symbol_sequence: list[str] | None = None,
        symbol_map: MapIdentity | None = None,
        opacity: float | None = None,
        size_max: int = 20,
    ) -> go.Figure: ...
    def line_ternary(
        self,
        a: ColumnData | None = None,
        b: ColumnData | None = None,
        c: ColumnData | None = None,
        line_dash: ColumnData | None = None,
        line_group: ColumnData | None = None,
        symbol: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        text: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        line_dash_sequence: list[str] | None = None,
        line_dash_map: MapIdentity | None = None,
        symbol_sequence: list[str] | None = None,
        symbol_map: MapIdentity | None = None,
        markers: bool = False,
        line_shape: LineShape | None = None,
    ) -> go.Figure: ...
    def scatter_polar(
        self,
        r: ColumnData | None = None,
        theta: ColumnData | None = None,
        symbol: ColumnData | None = None,
        size: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        text: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        symbol_sequence: list[str] | None = None,
        symbol_map: MapIdentity | None = None,
        opacity: float | None = None,
        direction: Direction = "clockwise",
        start_angle: int = 90,
        size_max: int = 20,
        range_r: Sequence[int | float] | None = None,
        range_theta: Sequence[int | float] | None = None,
        log_r: bool = False,
        render_mode: RenderMode = "auto",
    ) -> go.Figure: ...
    def line_polar(
        self,
        r: ColumnData | None = None,
        theta: ColumnData | None = None,
        line_dash: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        line_group: ColumnData | None = None,
        text: ColumnData | None = None,
        symbol: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        line_dash_sequence: list[str] | None = None,
        line_dash_map: MapIdentity | None = None,
        symbol_sequence: list[str] | None = None,
        symbol_map: MapIdentity | None = None,
        markers: bool = False,
        direction: Direction = "clockwise",
        start_angle: int = 90,
        line_close: bool = False,
        line_shape: LineShape | None = None,
        render_mode: RenderMode = "auto",
        range_r: Sequence[int | float] | None = None,
        range_theta: Sequence[int | float] | None = None,
        log_r: bool = False,
    ) -> go.Figure: ...
    def bar_polar(
        self,
        r: ColumnData | None = None,
        theta: ColumnData | None = None,
        pattern_shape: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        base: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        color_continuous_scale: list[str] | None = None,
        pattern_shape_sequence: list[str] | None = None,
        pattern_shape_map: MapIdentity | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        barnorm: ValNorm | None = None,
        barmode: BarMode = "relative",
        direction: Direction = "clockwise",
        start_angle: int = 90,
        range_r: Sequence[int | float] | None = None,
        range_theta: Sequence[int | float] | None = None,
        log_r: bool = False,
    ) -> go.Figure: ...
    def choropleth(
        self,
        lat: ColumnData | None = None,
        lon: ColumnData | None = None,
        locations: ColumnData | None = None,
        locationmode: LocationMode | None = None,
        geojson: dict[str, Any] | None = None,
        featureidkey: str = "id",
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        projection: Projection | None = None,
        scope: GeoScope | None = None,
        center: MapCenter | None = None,
        fitbounds: FitBounds = "False",
        basemap_visible: bool | None = None,
    ) -> go.Figure: ...
    def scatter_geo(
        self,
        lat: ColumnData | None = None,
        lon: ColumnData | None = None,
        locations: ColumnData | None = None,
        locationmode: LocationMode | None = None,
        geojson: dict[str, Any] | None = None,
        featureidkey: str = "id",
        text: ColumnData | None = None,
        symbol: ColumnData | None = None,
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        size: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        symbol_sequence: list[str] | None = None,
        symbol_map: MapIdentity | None = None,
        opacity: float | None = None,
        size_max: int = 20,
        projection: Projection | None = None,
        scope: GeoScope | None = None,
        center: MapCenter | None = None,
        fitbounds: FitBounds = "False",
        basemap_visible: bool | None = None,
    ) -> go.Figure: ...
    def line_geo(
        self,
        lat: ColumnData | None = None,
        lon: ColumnData | None = None,
        locations: ColumnData | None = None,
        locationmode: LocationMode | None = None,
        geojson: dict[str, Any] | None = None,
        featureidkey: str = "id",
        line_dash: ColumnData | None = None,
        text: ColumnData | None = None,
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        line_group: ColumnData | None = None,
        symbol: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        line_dash_sequence: list[str] | None = None,
        line_dash_map: MapIdentity | None = None,
        symbol_sequence: list[str] | None = None,
        symbol_map: MapIdentity | None = None,
        markers: bool = False,
        projection: Projection | None = None,
        scope: GeoScope | None = None,
        center: MapCenter | None = None,
        fitbounds: FitBounds = "False",
        basemap_visible: bool | None = None,
    ) -> go.Figure: ...
    def scatter_map(
        self,
        lat: ColumnData | None = None,
        lon: ColumnData | None = None,
        text: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        size: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        opacity: float | None = None,
        size_max: int = 20,
        zoom: int = 8,
        center: MapCenter | None = None,
        map_style: MapStyle = "basic",
    ) -> go.Figure: ...
    def choropleth_map(
        self,
        geojson: dict[str, Any] | None = None,
        featureidkey: str = "id",
        locations: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        opacity: float | None = None,
        zoom: int = 8,
        center: MapCenter | None = None,
        map_style: MapStyle = "basic",
    ) -> go.Figure: ...


class Plots2D(ColorCustomizable, WithXY):
    def scatter(
        self,
        symbol: ColumnData | None = None,
        size: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        text: ColumnData | None = None,
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        error_x: ColumnData | None = None,
        error_x_minus: ColumnData | None = None,
        error_y: ColumnData | None = None,
        error_y_minus: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        orientation: Orientation | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        symbol_sequence: list[str] | None = None,
        symbol_map: MapIdentity | None = None,
        opacity: float | None = None,
        size_max: int = 20,
        marginal_x: Marginal | None = None,
        marginal_y: Marginal | None = None,
        trendline: TrendlineFunc | None = None,
        trendline_options: dict[str, Any] | None = None,
        trendline_color_override: str | None = None,
        trendline_scope: TrendLineScope = "trace",
        log_x: bool = False,
        log_y: bool = False,
        range_x: Sequence[int | float] | None = None,
        range_y: Sequence[int | float] | None = None,
        render_mode: RenderMode = "auto",
    ) -> go.Figure: ...
    def line(
        self,
        line_group: ColumnData | None = None,
        line_dash: ColumnData | None = None,
        symbol: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        text: ColumnData | None = None,
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        error_x: ColumnData | None = None,
        error_x_minus: ColumnData | None = None,
        error_y: ColumnData | None = None,
        error_y_minus: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        orientation: Orientation | None = None,
        line_dash_sequence: list[str] | None = None,
        line_dash_map: MapIdentity | None = None,
        symbol_sequence: list[str] | None = None,
        symbol_map: MapIdentity | None = None,
        markers: bool = False,
        log_x: bool = False,
        log_y: bool = False,
        range_x: Sequence[int | float] | None = None,
        range_y: Sequence[int | float] | None = None,
        line_shape: LineShape | None = None,
        render_mode: RenderMode = "auto",
    ) -> go.Figure: ...
    def area(
        self,
        line_group: ColumnData | None = None,
        pattern_shape: ColumnData | None = None,
        symbol: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        text: ColumnData | None = None,
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        pattern_shape_sequence: list[str] | None = None,
        pattern_shape_map: MapIdentity | None = None,
        symbol_sequence: list[str] | None = None,
        symbol_map: MapIdentity | None = None,
        markers: bool = False,
        orientation: Orientation | None = None,
        groupnorm: ValNorm | None = None,
        log_x: bool = False,
        log_y: bool = False,
        range_x: Sequence[int | float] | None = None,
        range_y: Sequence[int | float] | None = None,
        line_shape: LineShape | None = None,
    ) -> go.Figure: ...
    def bar(
        self,
        pattern_shape: ColumnData | None = None,
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        text: ColumnData | None = None,
        base: ColumnData | None = None,
        error_x: ColumnData | None = None,
        error_x_minus: ColumnData | None = None,
        error_y: ColumnData | None = None,
        error_y_minus: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        color_continuous_scale: list[str] | None = None,
        pattern_shape_sequence: list[str] | None = None,
        pattern_shape_map: MapIdentity | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        opacity: float | None = None,
        orientation: Orientation | None = None,
        barmode: BarMode = "relative",
        log_x: bool = False,
        log_y: bool = False,
        range_x: Sequence[int | float] | None = None,
        range_y: Sequence[int | float] | None = None,
        text_auto: bool | str = False,
    ) -> go.Figure: ...

    def box(
        self,
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        orientation: Orientation | None = None,
        boxmode: DisplayMode = "group",
        log_x: bool = False,
        log_y: bool = False,
        range_x: Sequence[int | float] | None = None,
        range_y: Sequence[int | float] | None = None,
        points: Points | bool = "outliers",
        notched: bool = False,
    ) -> go.Figure: ...
    def strip(
        self,
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        orientation: Orientation | None = None,
        stripmode: DisplayMode = "group",
        log_x: bool = False,
        log_y: bool = False,
        range_x: Sequence[int | float] | None = None,
        range_y: Sequence[int | float] | None = None,
    ) -> go.Figure: ...

    def funnel(
        self,
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        text: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        opacity: float | None = None,
        orientation: Orientation | None = None,
        log_x: bool = False,
        log_y: bool = False,
        range_x: Sequence[int | float] | None = None,
        range_y: Sequence[int | float] | None = None,
    ) -> go.Figure: ...

    def ecdf(
        self,
        text: ColumnData | None = None,
        line_dash: ColumnData | None = None,
        symbol: ColumnData | None = None,
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        markers: bool = False,
        lines: bool = True,
        category_orders: dict[str, list[str]] | None = None,
        line_dash_sequence: list[str] | None = None,
        line_dash_map: MapIdentity | None = None,
        symbol_sequence: list[str] | None = None,
        symbol_map: MapIdentity | None = None,
        marginal: Marginal | None = None,
        opacity: float | None = None,
        orientation: Orientation | None = None,
        ecdfnorm: str | None = "probability",
        ecdfmode: EcdfMode = "standard",
        render_mode: RenderMode = "auto",
        log_x: bool = False,
        log_y: bool = False,
        range_x: Sequence[int | float] | None = None,
        range_y: Sequence[int | float] | None = None,
    ) -> go.Figure: ...

    def histogram(
        self,
        pattern_shape: ColumnData | None = None,
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        pattern_shape_sequence: list[str] | None = None,
        pattern_shape_map: MapIdentity | None = None,
        marginal: Marginal | None = None,
        opacity: float | None = None,
        orientation: Orientation | None = None,
        barmode: BarMode = "relative",
        barnorm: ValNorm | None = None,
        histnorm: HistNorm | None = None,
        log_x: bool = False,
        log_y: bool = False,
        range_x: Sequence[int | float] | None = None,
        range_y: Sequence[int | float] | None = None,
        histfunc: HistFunc | None = None,
        cumulative: bool = False,
        nbins: int | None = None,
        text_auto: bool | str = False,
    ) -> go.Figure: ...
    def violin(
        self,
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        orientation: Orientation | None = None,
        violinmode: Literal["group", "overlay"] = "group",
        log_x: bool = False,
        log_y: bool = False,
        range_x: Sequence[int | float] | None = None,
        range_y: Sequence[int | float] | None = None,
        points: Points | bool = "outliers",
        box: bool = False,
    ) -> go.Figure: ...


class WithZ(Base):
    z: MultiColumnData | None = None


class Plot3D(Plots2D, WithZ):
    def density_contour(
        self,
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        orientation: Orientation | None = None,
        marginal_x: Marginal | None = None,
        marginal_y: Marginal | None = None,
        trendline: TrendlineFunc | None = None,
        trendline_options: dict[str, Any] | None = None,
        trendline_color_override: str | None = None,
        trendline_scope: TrendLineScope = "trace",
        log_x: bool = False,
        log_y: bool = False,
        range_x: Sequence[int | float] | None = None,
        range_y: Sequence[int | float] | None = None,
        histfunc: HistFunc | None = None,
        histnorm: HistNorm | None = None,
        nbinsx: int | None = None,
        nbinsy: int | None = None,
        text_auto: bool | str = False,
    ) -> go.Figure: ...
    def scatter_3d(
        self,
        symbol: ColumnData | None = None,
        size: ColumnData | None = None,
        text: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        error_x: ColumnData | None = None,
        error_x_minus: ColumnData | None = None,
        error_y: ColumnData | None = None,
        error_y_minus: ColumnData | None = None,
        error_z: ColumnData | None = None,
        error_z_minus: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        size_max: int = 20,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        symbol_sequence: list[str] | None = None,
        symbol_map: MapIdentity | None = None,
        opacity: float | None = None,
        log_x: bool = False,
        log_y: bool = False,
        log_z: bool = False,
        range_x: Sequence[int | float] | None = None,
        range_y: Sequence[int | float] | None = None,
        range_z: Sequence[int | float] | None = None,
    ) -> go.Figure: ...
    def line_3d(
        self,
        line_dash: ColumnData | None = None,
        text: ColumnData | None = None,
        line_group: ColumnData | None = None,
        symbol: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        error_x: ColumnData | None = None,
        error_x_minus: ColumnData | None = None,
        error_y: ColumnData | None = None,
        error_y_minus: ColumnData | None = None,
        error_z: ColumnData | None = None,
        error_z_minus: ColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        line_dash_sequence: list[str] | None = None,
        line_dash_map: MapIdentity | None = None,
        symbol_sequence: list[str] | None = None,
        symbol_map: MapIdentity | None = None,
        markers: bool = False,
        log_x: bool = False,
        log_y: bool = False,
        log_z: bool = False,
        range_x: Sequence[int | float] | None = None,
        range_y: Sequence[int | float] | None = None,
        range_z: Sequence[int | float] | None = None,
    ) -> go.Figure: ...


class DensityHeatmap(WithZ, WithXY):
    def density_heatmap(
        self,
        facet_row: ColumnData | None = None,
        facet_col: ColumnData | None = None,
        facet_col_wrap: int = 0,
        facet_row_spacing: float | None = None,
        facet_col_spacing: float | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        orientation: Orientation | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        marginal_x: Marginal | None = None,
        marginal_y: Marginal | None = None,
        opacity: float | None = None,
        log_x: bool = False,
        log_y: bool = False,
        range_x: Sequence[int | float] | None = None,
        range_y: Sequence[int | float] | None = None,
        histfunc: HistFunc | None = None,
        histnorm: HistNorm | None = None,
        nbinsx: int | None = None,
        nbinsy: int | None = None,
        text_auto: bool | str = False,
    ) -> go.Figure: ...


class SpecializedPlots(WithZ):
    def density_map(
        self,
        lat: ColumnData | None = None,
        lon: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        opacity: float | None = None,
        zoom: int = 8,
        center: MapCenter | None = None,
        map_style: MapStyle = "basic",
        radius: int = 30,
    ) -> go.Figure: ...
    def density_mapbox(
        self,
        lat: ColumnData | None = None,
        lon: ColumnData | None = None,
        hover_name: ColumnData | None = None,
        hover_data: HoverData | None = None,
        custom_data: MultiColumnData | None = None,
        animation_frame: ColumnData | None = None,
        animation_group: ColumnData | None = None,
        category_orders: dict[str, list[str]] | None = None,
        color_continuous_scale: list[str] | None = None,
        range_color: Sequence[int | float] | None = None,
        color_continuous_midpoint: int | float | None = None,
        opacity: float | None = None,
        zoom: int = 8,
        center: MapCenter | None = None,
        mapbox_style: MapBoxStyle = "basic",
        radius: int = 30,
    ) -> go.Figure: ...
